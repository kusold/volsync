---
# yamllint disable rule:line-length

# This is a re-usable workflow, meant to be called as a step from other
# workflows. It is not meant to be triggered on its own.

# This will take a continer image that was previously stored as a build artifact
# and push it to a container registry.

on:    # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      artifact-name:
        description: Name of the previously uploaded artifact
        required: true
        type: string
      image-filename:
        description: Name of the image tar in the artifact
        default: image.tar
        required: false
        type: string
      image-name:
        description: Name of the container image to push
        required: true
        type: string
    secrets:
      registry-username:
        description: Username for the image registry
        required: true
      registry-password:
        description: Password for the image registry
        required: true

env:
  TMP_LOCAL_IMAGE: "local-image"

jobs:
  push-to-registry:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.image-name}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Download containers
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a    # v3.0.2
        with:
          name: images
          path: /tmp/images

      - name: Import container image
        run: |
          for image in /tmp/images/*.tar; do
            docker load -i $image
          done

      - name: Push images to local registry
        run: |
          docker push -a ${{ env.TMP_LOCAL_IMAGE }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${{ inputs.image-name }}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.registry-password }}" | docker login -u "${{ secrets.registry-username }}" --password-stdin ${REGISTRY}

      - name: Temp Dockerfile
        run: |
          mkdir -p /tmp/build_ctx
          echo "FROM ${{ env.TMP_LOCAL_IMAGE }}:latest" > /tmp/build_ctx/Dockerfile

      - name: Push
        uses: docker/build-push-action@v4
        with:
          context: /tmp/build_ctx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
